// schema.prisma

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//  provider = "sqlite"
//  url      = "file:./dev.db"
//}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id            String    @id @default(uuid())
  image         String?
  title         String
  description   String?
  published     Boolean   @default(false)
  author        User?     @relation(fields: [authorId], references: [id])
  authorId      String?

}

model Post {
  id        String     @id @default(uuid())
  image     String?
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Account {
  id                 String     @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?    @db.Text
  access_token       String?    @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?    @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")

}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  bio           String
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  avatar        String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  games         Game[]
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

