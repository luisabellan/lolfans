generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id          Int     @id @default(autoincrement())
  image       String?
  title       String
  description String?
  published   Boolean @default(false)
  author      User?   @relation(fields: [authorId], references: [id])
  authorId    Int?

  @@map("games")
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @unique
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum RoleType {
  ADMIN
  USER
  GUEST
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())

  users     User[]     @relation("UserRoles") // many-to-many relationship
  userRoles UserRole[]
  User      User[]

  @@map("roles")
}

model User {
  id            Int        @id @default(autoincrement())
  name          String?
  email         String     @unique
  emailVerified DateTime?  @map("email_verified")
  avatar        String?
  createdAt     DateTime   @default(now()) @map(name: "created_at")
  updatedAt     DateTime   @updatedAt @map(name: "updated_at")
  roles         Role[]     @relation("UserRoles")
  games         Game[]
  accounts      Account[]
  sessions      Session[]
  role          Role?      @relation(fields: [roleId], references: [id])
  roleId        Int?
  UserRole      UserRole[]

  @@map("users")
}

model UserRole {
  id     Int @id @default(autoincrement())
  userId Int
  roleId Int

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
  @@map("user_roles")
}
