<<<<<<< HEAD
import { Fragment, useState } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Link from 'next/link';
import Image from 'next/image';
import PropTypes from 'prop-types';
import AuthModal from './AuthModal';
import { Menu, Transition } from '@headlessui/react';
import {
  HeartIcon,
  HomeIcon,
  LogoutIcon,
  PlusIcon,
  SparklesIcon,
  UserIcon,
} from '@heroicons/react/outline';
import { ChevronDownIcon } from '@heroicons/react/solid';
import { useSession, signOut } from 'next-auth/react';
import { getPlaylistItems } from "@/utils/youtube.js";



const menuItems = [
  {
    label: 'Add a new game',
    icon: PlusIcon,
    href: '/list',
  },
  {
    label: 'My games',
    icon: HomeIcon,
    href: '/games',
  },
  {
    label: 'Favorites',
    icon: HeartIcon,
    href: '/favorites',
  },
  {
    label: 'Logout',
    icon: LogoutIcon,
    onClick: signOut,
  },
];



const Layout = async ({userName, isUserLogged, children = null }) => {
  const { data: session, status } = useSession();
  const user = session?.user || (userName && isUserLogged);
  const isLoadingUser = status === 'loading';

  const router = useRouter();

  const [showModal, setShowModal] = useState(false);


  const openModal = () => setShowModal(true);
  const closeModal = () => setShowModal(false);

   // Your YouTube channel ID here
   const channelId = "UC-lHJZR3Gqxm24_Vd_AJ5Yw";

   // Call the getPlaylistItems function to fetch the list of videos
   const videos = await getPlaylistItems(channelId);
=======
import React from "react";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import PropTypes from "prop-types";
import AuthModal from "./AuthModal";
import { Menu, Transition } from "@headlessui/react";
import { ChevronDownIcon } from "@heroicons/react/solid";
import { useSession, signOut } from "next-auth/react";
import HeaderMenu from "./HeaderMenu";
import Welcome from "./Welcome";
>>>>>>> dev

export default function Layout({ isUserLogged, children }) {
  return (
    <>
      <Head>
        <title>LoLFans</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <HeaderMenu isUserLogged={isUserLogged} />

      {/**
           * The type is defined and can be autocompleted
           * ðŸ’¡ Tip: Hover over `data` to see the result type
           * ðŸ’¡ Tip: CMD+Click (or CTRL+Click) on `text` to go to the server definition
           * ðŸ’¡ Tip: Secondary click on `text` and "Rename Symbol" to rename it both on the client & server
           
    
           {result.data ? (<h2>{result.data.greeting}</h2>) : (<h2>Loading...</h2>)}
        */}
      {children}
    </>
  );
}
